// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2018 02:40:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sistema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistema_vlg_sample_tst(
	btn,
	btn1,
	clk,
	data_in1,
	data_in2,
	int,
	rst_n,
	sampler_tx
);
input  btn;
input  btn1;
input  clk;
input [7:0] data_in1;
input [7:0] data_in2;
input  int;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(btn or btn1 or clk or data_in1 or data_in2 or int or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sistema_vlg_check_tst (
	bus_data_out,
	leds,
	sampler_rx
);
input [7:0] bus_data_out;
input [15:0] leds;
input sampler_rx;

reg [7:0] bus_data_out_expected;
reg [15:0] leds_expected;

reg [7:0] bus_data_out_prev;
reg [15:0] leds_prev;

reg [7:0] bus_data_out_expected_prev;
reg [15:0] leds_expected_prev;

reg [7:0] last_bus_data_out_exp;
reg [15:0] last_leds_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	bus_data_out_prev = bus_data_out;
	leds_prev = leds;
end

// update expected /o prevs

always @(trigger)
begin
	bus_data_out_expected_prev = bus_data_out_expected;
	leds_expected_prev = leds_expected;
end


// expected leds[ 15 ]
initial
begin
	leds_expected[15] = 1'bX;
end 
// expected leds[ 14 ]
initial
begin
	leds_expected[14] = 1'bX;
end 
// expected leds[ 13 ]
initial
begin
	leds_expected[13] = 1'bX;
end 
// expected leds[ 12 ]
initial
begin
	leds_expected[12] = 1'bX;
end 
// expected leds[ 11 ]
initial
begin
	leds_expected[11] = 1'bX;
end 
// expected leds[ 10 ]
initial
begin
	leds_expected[10] = 1'bX;
end 
// expected leds[ 9 ]
initial
begin
	leds_expected[9] = 1'bX;
end 
// expected leds[ 8 ]
initial
begin
	leds_expected[8] = 1'bX;
end 
// expected leds[ 7 ]
initial
begin
	leds_expected[7] = 1'bX;
end 
// expected leds[ 6 ]
initial
begin
	leds_expected[6] = 1'bX;
end 
// expected leds[ 5 ]
initial
begin
	leds_expected[5] = 1'bX;
end 
// expected leds[ 4 ]
initial
begin
	leds_expected[4] = 1'bX;
end 
// expected leds[ 3 ]
initial
begin
	leds_expected[3] = 1'bX;
end 
// expected leds[ 2 ]
initial
begin
	leds_expected[2] = 1'bX;
end 
// expected leds[ 1 ]
initial
begin
	leds_expected[1] = 1'bX;
end 
// expected leds[ 0 ]
initial
begin
	leds_expected[0] = 1'bX;
end 
// expected bus_data_out[ 7 ]
initial
begin
	bus_data_out_expected[7] = 1'bX;
end 
// expected bus_data_out[ 6 ]
initial
begin
	bus_data_out_expected[6] = 1'bX;
end 
// expected bus_data_out[ 5 ]
initial
begin
	bus_data_out_expected[5] = 1'bX;
end 
// expected bus_data_out[ 4 ]
initial
begin
	bus_data_out_expected[4] = 1'bX;
end 
// expected bus_data_out[ 3 ]
initial
begin
	bus_data_out_expected[3] = 1'bX;
end 
// expected bus_data_out[ 2 ]
initial
begin
	bus_data_out_expected[2] = 1'bX;
end 
// expected bus_data_out[ 1 ]
initial
begin
	bus_data_out_expected[1] = 1'bX;
end 
// expected bus_data_out[ 0 ]
initial
begin
	bus_data_out_expected[0] = 1'bX;
end 
// generate trigger
always @(bus_data_out_expected or bus_data_out or leds_expected or leds)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bus_data_out = %b | expected leds = %b | ",bus_data_out_expected_prev,leds_expected_prev);
	$display("| real bus_data_out = %b | real leds = %b | ",bus_data_out_prev,leds_prev);
`endif
	if (
		( bus_data_out_expected_prev[0] !== 1'bx ) && ( bus_data_out_prev[0] !== bus_data_out_expected_prev[0] )
		&& ((bus_data_out_expected_prev[0] !== last_bus_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[0] = bus_data_out_expected_prev[0];
	end
	if (
		( bus_data_out_expected_prev[1] !== 1'bx ) && ( bus_data_out_prev[1] !== bus_data_out_expected_prev[1] )
		&& ((bus_data_out_expected_prev[1] !== last_bus_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[1] = bus_data_out_expected_prev[1];
	end
	if (
		( bus_data_out_expected_prev[2] !== 1'bx ) && ( bus_data_out_prev[2] !== bus_data_out_expected_prev[2] )
		&& ((bus_data_out_expected_prev[2] !== last_bus_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[2] = bus_data_out_expected_prev[2];
	end
	if (
		( bus_data_out_expected_prev[3] !== 1'bx ) && ( bus_data_out_prev[3] !== bus_data_out_expected_prev[3] )
		&& ((bus_data_out_expected_prev[3] !== last_bus_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[3] = bus_data_out_expected_prev[3];
	end
	if (
		( bus_data_out_expected_prev[4] !== 1'bx ) && ( bus_data_out_prev[4] !== bus_data_out_expected_prev[4] )
		&& ((bus_data_out_expected_prev[4] !== last_bus_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[4] = bus_data_out_expected_prev[4];
	end
	if (
		( bus_data_out_expected_prev[5] !== 1'bx ) && ( bus_data_out_prev[5] !== bus_data_out_expected_prev[5] )
		&& ((bus_data_out_expected_prev[5] !== last_bus_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[5] = bus_data_out_expected_prev[5];
	end
	if (
		( bus_data_out_expected_prev[6] !== 1'bx ) && ( bus_data_out_prev[6] !== bus_data_out_expected_prev[6] )
		&& ((bus_data_out_expected_prev[6] !== last_bus_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[6] = bus_data_out_expected_prev[6];
	end
	if (
		( bus_data_out_expected_prev[7] !== 1'bx ) && ( bus_data_out_prev[7] !== bus_data_out_expected_prev[7] )
		&& ((bus_data_out_expected_prev[7] !== last_bus_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bus_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bus_data_out_expected_prev);
		$display ("     Real value = %b", bus_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bus_data_out_exp[7] = bus_data_out_expected_prev[7];
	end
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( leds_expected_prev[4] !== 1'bx ) && ( leds_prev[4] !== leds_expected_prev[4] )
		&& ((leds_expected_prev[4] !== last_leds_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[4] = leds_expected_prev[4];
	end
	if (
		( leds_expected_prev[5] !== 1'bx ) && ( leds_prev[5] !== leds_expected_prev[5] )
		&& ((leds_expected_prev[5] !== last_leds_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[5] = leds_expected_prev[5];
	end
	if (
		( leds_expected_prev[6] !== 1'bx ) && ( leds_prev[6] !== leds_expected_prev[6] )
		&& ((leds_expected_prev[6] !== last_leds_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[6] = leds_expected_prev[6];
	end
	if (
		( leds_expected_prev[7] !== 1'bx ) && ( leds_prev[7] !== leds_expected_prev[7] )
		&& ((leds_expected_prev[7] !== last_leds_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[7] = leds_expected_prev[7];
	end
	if (
		( leds_expected_prev[8] !== 1'bx ) && ( leds_prev[8] !== leds_expected_prev[8] )
		&& ((leds_expected_prev[8] !== last_leds_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[8] = leds_expected_prev[8];
	end
	if (
		( leds_expected_prev[9] !== 1'bx ) && ( leds_prev[9] !== leds_expected_prev[9] )
		&& ((leds_expected_prev[9] !== last_leds_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[9] = leds_expected_prev[9];
	end
	if (
		( leds_expected_prev[10] !== 1'bx ) && ( leds_prev[10] !== leds_expected_prev[10] )
		&& ((leds_expected_prev[10] !== last_leds_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[10] = leds_expected_prev[10];
	end
	if (
		( leds_expected_prev[11] !== 1'bx ) && ( leds_prev[11] !== leds_expected_prev[11] )
		&& ((leds_expected_prev[11] !== last_leds_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[11] = leds_expected_prev[11];
	end
	if (
		( leds_expected_prev[12] !== 1'bx ) && ( leds_prev[12] !== leds_expected_prev[12] )
		&& ((leds_expected_prev[12] !== last_leds_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[12] = leds_expected_prev[12];
	end
	if (
		( leds_expected_prev[13] !== 1'bx ) && ( leds_prev[13] !== leds_expected_prev[13] )
		&& ((leds_expected_prev[13] !== last_leds_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[13] = leds_expected_prev[13];
	end
	if (
		( leds_expected_prev[14] !== 1'bx ) && ( leds_prev[14] !== leds_expected_prev[14] )
		&& ((leds_expected_prev[14] !== last_leds_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[14] = leds_expected_prev[14];
	end
	if (
		( leds_expected_prev[15] !== 1'bx ) && ( leds_prev[15] !== leds_expected_prev[15] )
		&& ((leds_expected_prev[15] !== last_leds_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[15] = leds_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sistema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn;
reg btn1;
reg clk;
reg [7:0] data_in1;
reg [7:0] data_in2;
reg int;
reg rst_n;
// wires                                               
wire [7:0] bus_data_out;
wire [15:0] leds;

wire sampler;                             

// assign statements (if any)                          
sistema i1 (
// port map - connection between master ports and signals/registers   
	.btn(btn),
	.btn1(btn1),
	.bus_data_out(bus_data_out),
	.clk(clk),
	.data_in1(data_in1),
	.data_in2(data_in2),
	.\int (int),
	.leds(leds),
	.rst_n(rst_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// int
initial
begin
	int = 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #10000 1'b1;
end 

// btn
initial
begin
	btn = 1'b0;
	btn = #20000 1'b1;
	btn = #20000 1'b0;
end 

// btn1
initial
begin
	btn1 = 1'b0;
	btn1 = #520000 1'b1;
	btn1 = #30000 1'b0;
end 
// data_in1[ 7 ]
initial
begin
	data_in1[7] = 1'b0;
end 
// data_in1[ 6 ]
initial
begin
	data_in1[6] = 1'b0;
end 
// data_in1[ 5 ]
initial
begin
	data_in1[5] = 1'b0;
end 
// data_in1[ 4 ]
initial
begin
	data_in1[4] = 1'b1;
end 
// data_in1[ 3 ]
initial
begin
	data_in1[3] = 1'b1;
end 
// data_in1[ 2 ]
initial
begin
	data_in1[2] = 1'b0;
end 
// data_in1[ 1 ]
initial
begin
	data_in1[1] = 1'b0;
end 
// data_in1[ 0 ]
initial
begin
	data_in1[0] = 1'b1;
end 
// data_in2[ 7 ]
initial
begin
	data_in2[7] = 1'b0;
end 
// data_in2[ 6 ]
initial
begin
	data_in2[6] = 1'b0;
end 
// data_in2[ 5 ]
initial
begin
	data_in2[5] = 1'b0;
end 
// data_in2[ 4 ]
initial
begin
	data_in2[4] = 1'b0;
end 
// data_in2[ 3 ]
initial
begin
	data_in2[3] = 1'b0;
end 
// data_in2[ 2 ]
initial
begin
	data_in2[2] = 1'b1;
end 
// data_in2[ 1 ]
initial
begin
	data_in2[1] = 1'b1;
end 
// data_in2[ 0 ]
initial
begin
	data_in2[0] = 1'b1;
end 

sistema_vlg_sample_tst tb_sample (
	.btn(btn),
	.btn1(btn1),
	.clk(clk),
	.data_in1(data_in1),
	.data_in2(data_in2),
	.int(int),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

sistema_vlg_check_tst tb_out(
	.bus_data_out(bus_data_out),
	.leds(leds),
	.sampler_rx(sampler)
);
endmodule

